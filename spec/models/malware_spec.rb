require 'rails_helper'

RSpec.describe Malware, type: :model do

  describe 'validations' do

    before(:each) { @malware = build(:malware) }

    it 'has a valid factory' do
      expect(@malware).to be_valid
    end

    describe 'invalid states' do

      after(:each) { expect(@malware).not_to be_valid }

      it 'is invalid when md5 is nil' do
        @malware.md5 = nil
      end

      it 'is invalid when md5 is not an MD5 hash' do
        @malware.md5 = 'Nope. Not a hash'
      end

      it 'is invalid when md5 is not in hex format' do
        @malware.md5 = '0xH41D8CD98F00B204E9800998ECF8427E'
      end

      it 'is invalid when md5 is missing the hex string prefix' do
        @malware.md5 = 'A41D8CD98F00B204E9800998ECF8427E'
      end

      it 'is invalid when md5 is not unique' do
        create(:malware)
      end

      it 'is invalid when size is nil' do
        @malware.size = nil
      end
    end
  end

  describe '.import' do

    # note - without testing the contents of the input file, changing it
    #        runs the risk of inadvertantly creating invalid input.
    #        Keep that in mind if all the tests in this section suddenly fail
    before(:each) do
      test_data = File.expand_path '../../../example_input.csv', __FILE__
      Malware.import(test_data)
    end

    it 'can create records from a valid csv file' do
      expect(Malware.all.length).to be > 0
    end

    it 'creates associated models and assigns them' do
      malware = Malware.all
      malware.each do |mal|
        expect(mal.filetype).not_to be_nil
        expect(mal.classification).not_to be_nil
      end
    end
  end

  describe 'threat_type counting methods' do
    before (:each) do
      create(:malware, :random_md5)
      a_bug = create(:classification, threat_type: 'bug')
      2.times { create(:malware, :random_md5, classification: a_bug) }
    end

    describe '.threat_count' do
      it 'returns a collection of threat types and counts' do
        expect(Malware.threat_count).to include('bug' => 2, 'worm' => 1)
      end
    end

    describe '.threat_table' do
      it 'massages threat_count output with attribute names' do
        table_data = Malware.threat_table
        expect(table_data[0].values).to include('bug', 2)
        expect(table_data[1].values).to include('worm', 1)
      end
    end
  end

end
